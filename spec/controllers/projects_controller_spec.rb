require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProjectsController, type: :controller do

  let!(:user) { User.create(email: 'admin@example.com', password: '12345678', confirmed_at: DateTime.now - 3.minutes, admin: true) }
  let!(:org_user) { User.create(email: 'user@example.com', password: '12345678', confirmed_at: DateTime.now - 3.minutes) }
  let!(:organization) { Organization.create(:legally_formed => false,
    :email => "Email",
    :telephone_number => "Telephone Number",
    :name => "Name",
    :twitter => "Twitter",
    :facebook => "Facebook",
    :accepted => true,
    :user_id => org_user.id) }
  let!(:org_user2) { User.create(email: 'user2@example.com', password: '12345678', confirmed_at: DateTime.now - 3.minutes) }
  let!(:organization2) { Organization.create(:legally_formed => false,
    :email => "Email2",
    :telephone_number => "Telephone Number",
    :name => "Name2",
    :twitter => "Twitter",
    :facebook => "Facebook",
    :user_id => org_user2.id) }

  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: "Project",
    location: "Argentina",
    start_date: Date.new(2017,1,1),
    end_date: Date.new(2017,12,1),
    published: true
    }
  }

  let(:invalid_attributes) {
    {name: ""}
  }

  describe "for admin" do
    before(:each) do
      sign_in user
    end

    describe "GET #index" do
      render_views

      it "renders all projects" do
        project = Project.create! valid_attributes.merge({organization_id: organization.id})
        project2 = Project.create! valid_attributes.merge({organization_id: organization2.id})
        get :index, params: {}
        expect(response.body).to include(project.name)
        expect(response.body).to include(project2.name)
      end
    end

    describe "GET #show" do
      it "assigns the requested project as @project" do
        project = Project.create! valid_attributes.merge({organization_id: organization.id})
        get :show, params: {id: project.to_param}
        expect(assigns(:project)).to eq(project)
      end
    end

    describe "GET #edit" do
      it "assigns the requested project as @project" do
        project = Project.create! valid_attributes.merge({organization_id: organization.id})
        get :edit, params: {id: project.to_param}
        expect(assigns(:project)).to eq(project)
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          {end_date: Date.new(2018,7,1)}
        }

        it "updates the requested project" do
          project = Project.create! valid_attributes.merge({organization_id: organization.id})
          put :update, params: {id: project.to_param, project: new_attributes}
          project.reload
          expect(project.end_date).to eq(Date.new(2018,7,1))
        end

        it "assigns the requested project as @project" do
          project = Project.create! valid_attributes.merge({organization_id: organization.id})
          put :update, params: {id: project.to_param, project: valid_attributes}
          expect(assigns(:project)).to eq(project)
        end

        it "redirects to the project" do
          project = Project.create! valid_attributes.merge({organization_id: organization.id})
          put :update, params: {id: project.to_param, project: valid_attributes}
          expect(response).to redirect_to(projects_path)
        end
      end

      context "with invalid params" do
        it "assigns the project as @project" do
          project = Project.create! valid_attributes.merge({organization_id: organization.id})
          put :update, params: {id: project.to_param, project: invalid_attributes}
          expect(assigns(:project)).to eq(project)
        end

        it "re-renders the 'edit' template" do
          project = Project.create! valid_attributes.merge({organization_id: organization.id})
          put :update, params: {id: project.to_param, project: invalid_attributes}
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested project" do
        project = Project.create! valid_attributes.merge({organization_id: organization.id})
        expect {
          delete :destroy, params: {id: project.to_param}
        }.to change(Project, :count).by(-1)
      end

      it "redirects to the projects list" do
        project = Project.create! valid_attributes.merge({organization_id: organization.id})
        delete :destroy, params: {id: project.to_param}
        expect(response).to redirect_to(projects_url)
      end
    end
  end

  describe "for accepted organization user" do
    before(:each) { sign_in org_user }

    describe "GET #new" do
      it "assigns a new project as @project" do
        get :new, params: {}
        expect(assigns(:project)).to be_a_new(Project)
      end
    end

    describe "GET #edit" do
      it "assigns the requested project as @project" do
        project = Project.create! valid_attributes.merge({organization_id: organization.id})
        get :edit, params: {id: project.to_param}
        expect(assigns(:project)).to eq(project)
      end

      it "can't edit other organizations's projects" do
        project = Project.create! valid_attributes.merge({organization_id: organization2.id})
        get :edit, params: {id: project.to_param}
        expect(response).to be_forbidden
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Project" do
          expect {
            post :create, params: {project: valid_attributes.merge({organization_id: organization.id})}
          }.to change(Project, :count).by(1)
        end

        it "assigns a newly created project as @project" do
          post :create, params: {project: valid_attributes.merge({organization_id: organization.id})}
          expect(assigns(:project)).to be_a(Project)
          expect(assigns(:project)).to be_persisted
        end

        it "redirects to the created project" do
          post :create, params: {project: valid_attributes.merge({organization_id: organization.id})}
          expect(response).to redirect_to(projects_path)
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved project as @project" do
          post :create, params: {project: invalid_attributes}
          expect(assigns(:project)).to be_a_new(Project)
        end

        it "re-renders the 'new' template" do
          post :create, params: {project: invalid_attributes}
          expect(response).to render_template("new")
        end
      end
    end
  end
end
